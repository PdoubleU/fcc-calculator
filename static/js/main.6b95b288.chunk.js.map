{"version":3,"sources":["components/display.js","components/padstyle.js","components/keyboard.js","components/keys.js","components/mechanic.js","components/controlPanel.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","currentValue","id","result","React","Component","inactive","border","boxShadow","padding","backgroundColor","marginTop","active","borderStyle","color","height","top","Keyboard","state","keyPad","changePadStyle","bind","handleClick","setState","e","RegExp","test","target","value","setTimeout","style","onClick","keyTrigger","valLIST","val","Math","decimal","n","k","factor","pow","round","calculate","numOne","operator","numTwo","undefined","Control","initialState","keyList","KEYLIST","prevButton","getValue","document","addEventListener","ISBUTTON","ISNUMBER","ISOPERATOR","NODEVAL","RESULT","CURRENTVAL","PREVBUTTON","length","CURRENTNUMBER","split","slice","checkLastThreeElements","changeOperator","splice","join","match","filter","el","reduce","acc","current","OPERATOR","NUMBER","parseFloat","toString","panel","map","obj","i","panelArr","key","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b95b288.chunk.js","sourcesContent":["/*it takes two properties from controlPanel: currentValue and result.\nIts role is to display them in specific area of calculator*/\nimport React from 'react';\nimport ReactFCCtest from 'react-fcctest';\n\nclass Display extends React.Component{\n    render(){\n        return(\n        <div>\n            <span className='display'>{this.props.currentValue}</span>\n            <div className='display' id='display'>\n                <span>{this.props.result}</span>\n            </div>\n        <ReactFCCtest/>\n        </div>\n        )\n    }\n}\n\nexport default Display;\n","/*constans belowe are used for buttons animation*/\nconst inactive = {\n    border: 'none',\n    boxShadow: '.1em .1em black',\n    padding: '.8em 1.2em',\n    backgroundColor: 'white',\n    marginTop: '0'\n}\nconst active = {\n    borderStyle: 'none',\n    padding: '.8em 1.2em',\n    backgroundColor: 'grey',\n    color: 'white',\n    height: '98%',\n    top: '.02em'\n}\n\nexport {inactive, active};","/*handle with click event on particular button.\nIt changes the button style. Used for creating keyboard consisting all buttons*/\nimport React from 'react';\nimport {inactive, active} from './padstyle';\n\nclass Keyboard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            keyPad: inactive\n        }\n    this.changePadStyle = this.changePadStyle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    }\nchangePadStyle(){\n    if(this.state.keyPad.backgroundColor === 'grey'){\n            this.setState({\n                keyPad: inactive,\n            })\n        } else {\n            this.setState({\n                keyPad: active\n            })\n        }\n    }\nhandleClick(e){\n    const ISBUTTON = new RegExp(/[0-9]|\\+|-|\\/|x|^A|\\.|=/gi)\n    if(ISBUTTON.test(e.target.value)){\n        this.changePadStyle();\n        setTimeout(()=>this.changePadStyle(), 150);\n    }\n}\n\nrender(){\n    return(\n    <button style={this.state.keyPad}\n            onClick={this.handleClick}\n            className='pad' id={this.props.id}\n            value={this.props.keyTrigger}> {this.props.keyTrigger} </button>\n    )\n    }\n}\n\nexport default Keyboard;","/*this object is use to map through it to make button elements.\nIts order is important to be properly displayed on the screen!!!*/\nconst valLIST = [{\n    val: 'ac',\n    keyTrigger: 'AC',\n    id: 'clear',\n  },{\n    val: '/',\n    keyTrigger: '/',\n    id: 'divide',\n  },{\n    val: 'x',\n    keyTrigger: 'x',\n    id: 'multiply',\n  },{\n    val: '7',\n    keyTrigger: 7,\n    id: 'seven',\n  },{\n    val: '8',\n    keyTrigger: 8,\n    id: 'eight',\n  },{\n    val: '9',\n    keyTrigger: 9,\n    id: 'nine',\n  },{\n    val: '-',\n    keyTrigger: '-',\n    id: 'subtract',\n  },{\n    val: '4',\n    keyTrigger: 4,\n    id: 'four',\n  },{\n    val: '5',\n    keyTrigger: 5,\n    id: 'five',\n  },{\n    val: '6',\n    keyTrigger: 6,\n    id: \"six\",\n  },{\n    val: '+',\n    keyTrigger: '+',\n    id: 'add',\n  },{\n    val: '1',\n    keyTrigger: 1,\n    id: 'one',\n  }, {\n    val: '2',\n    keyTrigger: 2,\n    id: 'two',\n  }, {\n    val: '3',\n    keyTrigger: 3,\n    id: 'three',\n  },{\n    val: '=',\n    keyTrigger: '=',\n    id: 'equals',\n  },{\n    val: '0',\n    keyTrigger: 0,\n    id: 'zero',\n  },{\n    val: '.',\n    keyTrigger: '.',\n    id: 'decimal',\n  },\n];\nexport default valLIST;","function calculate(numOne, operator, numTwo){\n    var result;\n    switch(operator){\n      case '+': result = Math.decimal(numOne + numTwo,4);\n      break;\n      case '-': result = Math.decimal(numOne - numTwo,4);\n      break;\n      case 'x': result = Math.decimal(numOne * numTwo,4);\n      break;\n      case '/': result = Math.decimal(numOne / numTwo,4);\n      break;\n      default: result = undefined;\n    }\n    return result;\n}\nMath.decimal = function(n, k)\n{\n    var factor = Math.pow(10, k+1);\n    n = Math.round(Math.round(n*factor)/10);\n    return n/(factor/10);\n}\n\nexport default calculate;","/*this component handle with onclick event on particular button.\nMore details are explaind near appropriate part of code*/\nimport React from 'react';\nimport Display from './display';\nimport Keyboard from './keyboard';\nimport KEYLIST from './keys';\nimport calculate from './mechanic';\nclass Control extends React.Component{\n    constructor(props){\n        super(props);\n        this.initialState = {                 /*initial state is set to use it after pressing 'clear' button as well as on load aplication*/\n            keyList: KEYLIST,\n            currentValue: '0',\n            prevButton: '',\n            result: '0'\n        }\n    this.state = this.initialState;\n    this.getValue = this.getValue.bind(this);\n    }\ncomponentDidMount() {\n    document.addEventListener('click', this.getValue)\n}\ngetValue(e){                        /*function is responsible for recognizing which button was pressed in the application*/\n    const ISBUTTON = new RegExp(/[0-9]|\\+|-|\\/|x|^a|\\.|=/gi);/*||*/\n    const ISNUMBER = new RegExp(/[0-9]/);                    /*bunch of REGEXP used many times in following if statements. It makes the code cleaner*/\n    const ISOPERATOR = new RegExp(/\\+|-|\\/|x/);              /*||*/\n    const NODEVAL = e.target.value;                          /*||*/\n    const RESULT = this.state.result;                        /*constans used many times in following if statements. Prepare to make code more redable*/\n    const CURRENTVAL = this.state.currentValue;              /*||*/\n    const PREVBUTTON = this.state.prevButton;                /*||*/\n    if (/^A/.test(NODEVAL)){this.setState(this.initialState) /*restart screen and state to initial one - clear button*/\n    } else if(ISBUTTON.test(NODEVAL)&&RESULT.length<=14&&RESULT!=='LIMIT REACHED'){\n\n            if(NODEVAL==='.'&&PREVBUTTON!=='.') {                                                   /*this part checks if pressed button is a dot or previously pressed buton is dot*/\n                let CURRENTNUMBER = CURRENTVAL.split(/\\+|-|x|\\//).slice(-1);                        /*statement makes sure that there is just one dot in each part of eqation*/\n                if(!/\\./.test(CURRENTNUMBER[0])&&CURRENTNUMBER[0]!==''){                            /*if dot is detected statement do not allow to enter another dot*/\n                    this.setState({currentValue: CURRENTVAL + '.', prevButton: NODEVAL,result: RESULT + '.'})\n                }\n                else if(!/\\./.test(CURRENTNUMBER[0])){                                              /*part works with dot button pressed on the very beggining and after operator as well*/\n                        this.setState({currentValue: CURRENTVAL + '0.', prevButton: NODEVAL, result: '0.'})\n                }                                                                                   /*when the dot button is pressed and this is very first operation it puts zero in front*/\n            }\n\n            else if (NODEVAL!=='.'&&ISNUMBER.test(NODEVAL)){                                        /*here if there is initial zero on the screen it will be replaced with enterend number*/\n                if(CURRENTVAL==='0'){\n                    this.setState({currentValue: NODEVAL, prevButton: NODEVAL, result: NODEVAL})\n                }\n                else if(ISOPERATOR.test(RESULT)&&!/^-/.test(CURRENTVAL)){                           /*it checks if result has already any operator - if yes, it change it with new one*/\n                    this.setState({currentValue: CURRENTVAL + NODEVAL,prevButton: NODEVAL, result: NODEVAL})\n                }\n                else {this.setState({currentValue: CURRENTVAL + NODEVAL,prevButton: NODEVAL, result: RESULT + NODEVAL})} /*otherwise the number will be just added to existing string*/\n            }\n\n            else if (ISOPERATOR.test(NODEVAL)&&CURRENTVAL!=='0'&&CURRENTVAL!=='-'&&CURRENTVAL!=='0.'){       /*check if operator entered consecutively two or more times*/\n                let checkLastThreeElements = CURRENTVAL.split('').slice(-3);\n                let changeOperator = CURRENTVAL.split('');                                                   /*if yes, previus operator is replaced with new one*/\n                if(ISOPERATOR.test(PREVBUTTON)&&NODEVAL!=='-'&&PREVBUTTON!=='-'){\n                    changeOperator.splice([changeOperator.length-1],1, NODEVAL);\n                    this.setState({currentValue: changeOperator.join(''),prevButton: NODEVAL, result: NODEVAL});\n                }\n                else if((checkLastThreeElements[1]==='-'&&checkLastThreeElements[2]==='-')){                  /*if we have used already two minuses, this part breaks if statement*/\n                }\n                else if(ISOPERATOR.test(checkLastThreeElements[1])&&checkLastThreeElements[2]==='-'){           /*it changes last two operators in case of using the third operator - it leaves the last used operator in equation */\n                    changeOperator.splice([changeOperator.length-2],2, NODEVAL);\n                    this.setState({currentValue: changeOperator.join(''),prevButton: NODEVAL, result: NODEVAL})\n                }\n                else if(PREVBUTTON!=='-'){\n                    this.setState({currentValue: CURRENTVAL + NODEVAL,prevButton: NODEVAL, result: NODEVAL})\n                }\n                else if(PREVBUTTON==='-'&&NODEVAL==='-'){\n                    this.setState({currentValue: CURRENTVAL + NODEVAL,prevButton: NODEVAL})\n                }\n            }\n\n            else if(NODEVAL==='-'&&CURRENTVAL==='0'){                                            /*when minus pressed on the very begining it remove initial zero and put minus instead */\n                this.setState({currentValue: NODEVAL, prevButton: NODEVAL, result: '-'})\n            }\n\n            else if(NODEVAL==='='){                                            /*evaluate equation - is using function importet from mechanic.js */\n                // eslint-disable-next-line array-callback-return\n                const ARRAY = CURRENTVAL.match(/(\\/|\\+|-|x*){2}?([0-9]*\\.?[0-9]*)?/ig).filter((el)=>{if(el!==' ') return el});  /*gives an array of numbers, decimal numbers and operators together like: ['-1','/2','+333',...] */\n                var result = ARRAY.reduce((acc, current) => {                   /*map prepared array to recognize correctly negative numbers and positive numbers */\n                    if(/^(\\/|\\+|-|x){2}/.test(current)){\n                        const OPERATOR = current.slice(0,1);\n                        const NUMBER = parseFloat(current.slice(1,));\n                        return calculate(parseFloat(acc), OPERATOR, NUMBER);\n                    } else {\n                        const OPERATOR = current.slice(0,1);\n                        const NUMBER = parseFloat(current.slice(1,));\n                        return calculate(parseFloat(acc), OPERATOR, NUMBER);\n                    }\n                });\n                this.setState({currentValue: result.toString(), result: result.toString(), prevButton: '='}) /*return as a result new state with result of equation which is ready for next operations */\n        }\n    } else if(ISBUTTON.test(NODEVAL)||ISNUMBER.test(NODEVAL)) {this.setState({result: 'LIMIT REACHED'})} /*when we reach limit od 14 digits in result screen this message will appear */\n}\n\nrender(){\n    let panel = this.state.keyList.map((obj, i, panelArr)=>{    /*create keyboard consisting all keys from imported KEYLIST */\n        return (\n        <Keyboard id={panelArr[i].id}\n            keyTrigger={panelArr[i].keyTrigger}\n            key={panelArr[i].id}\n            onClick={this.getValue}\n            />\n        )\n    });\n    return(               /*return display to which are passed properties.Return variable 'panel' */\n        <div className='calculator'>\n            <Display currentValue={this.state.currentValue}\n            result={this.state.result}/>\n            <span className='keyPad'>{panel}</span>\n        </div>\n        )\n    }\n}\n\nexport default Control;","import React from 'react';\nimport Control from './components/controlPanel';\n\nfunction App() {\n  return (\n    <div className='panel'>\n      <Control/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}